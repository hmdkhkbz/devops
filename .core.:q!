> MODULE [1mkubernetes.core.helm[0m (/root/.ansible/collections/ansible_collections/kubernetes/core/plugins/modules/helm.py)

  Install, upgrade, delete packages with the Helm package manager.

[1m  * note:[0m This module has a corresponding action plugin.

[1mOPTIONS[0m (red indicates it is required):

   [0;33mapi_key[0m  Token used to authenticate with the API. Can also be specified via [1;30m`K8S_AUTH_API_KEY'[0m environment
            variable.
        default: null
        type: str

   [0;33matomic[0m  If set, the installation process deletes the installation on failure.
        default: false
        type: bool

   [0;33mbinary_path[0m  The path of a helm binary to use.
        default: null
        type: path

   [0;33mca_cert[0m  Path to a CA certificate used to authenticate with the API. The full certificate chain must be provided to avoid
            certificate validation errors. Can also be specified via [1;30m`K8S_AUTH_SSL_CA_CERT'[0m environment
            variable.
        aliases: [ssl_ca_cert]
        default: null
        type: path

   [0;33mchart_ref[0m  chart_reference on chart repository.
              path to a packaged chart.
              path to an unpacked chart directory.
              absolute URL.
              Required when [4mrelease_state[0m is set to [1;30m`present'[0m.
        default: null
        type: path

   [0;33mchart_repo_url[0m  Chart repository URL where to locate the requested chart.
        default: null
        type: str

   [0;33mchart_version[0m  Chart version to install. If this is not specified, the latest version is installed.
        default: null
        type: str

   [0;33mcontext[0m  Helm option to specify which kubeconfig context to use.
            If the value is not specified in the task, the value of environment variable
            [1;30m`K8S_AUTH_CONTEXT'[0m will be used instead.
        aliases: [kube_context]
        default: null
        type: str

   [0;33mcreate_namespace[0m  Create the release namespace if not present.
        default: false
        type: bool

   [0;33mdependency_update[0m  Run standalone [1;30m`helm dependency update CHART'[0m before the operation.
                      Run inline [1;30m`--dependency-update'[0m with [1;30m`helm install'[0m command. This
                      feature is not supported yet with the [1;30m`helm upgrade'[0m command.
                      So we should consider to use [4mdependency_update[0m options with [4mreplace[0m option
                      enabled when specifying [4mchart_repo_url[0m.
                      The [4mdependency_update[0m option require the add of [1;30m`dependencies'[0m block in
                      [1;30m`Chart.yaml/requirements.yaml'[0m file.
                      For more information please visit https://helm.sh/docs/helm/helm_dependency/
        aliases: [dep_up]
        default: false
        type: bool

   [0;33mdisable_hook[0m  Helm option to disable hook on install/upgrade/delete.
        default: false
        type: bool

   [0;33mforce[0m   Helm option to force reinstall, ignore on new install.
        default: false
        type: bool

   [0;33mhistory_max[0m  Limit the maximum number of revisions saved per release.
                mutually exclusive with with [1;30m`replace'[0m.
        default: null
        type: int

   [0;33mhost[0m    Provide a URL for accessing the API. Can also be specified via [1;30m`K8S_AUTH_HOST'[0m environment variable.
        default: null
        type: str

   [0;33mkubeconfig[0m  Helm option to specify kubeconfig path to use.
               If the value is not specified in the task, the value of environment variable
               [1;30m`K8S_AUTH_KUBECONFIG'[0m will be used instead.
               The configuration can be provided as dictionary. Added in version 2.4.0.
        aliases: [kubeconfig_path]
        default: null
        type: raw

   [0;33mpost_renderer[0m  Path to an executable to be used for post rendering.
        default: null
        type: str

   [0;33mpurge[0m   Remove the release from the store and make its name free for later use.
        default: true
        type: bool

   [0;31m[1mrelease_name[0m[0m  Release name to manage.
        aliases: [name]
        type: str

   [0;31m[1mrelease_namespace[0m[0m  Kubernetes namespace where the chart should be installed.
        aliases: [namespace]
        type: str

   [0;33mrelease_state[0m  Desirated state of release.
        aliases: [state]
        choices: [present, absent]
        default: present
        type: str

   [0;33mrelease_values[0m  Value to pass to chart.
        aliases: [values]
        default: {}
        type: dict

   [0;33mreplace[0m  Reuse the given name, only if that name is a deleted release which remains in the history.
            This is unsafe in production environment.
            mutually exclusive with with [1;30m`history_max'[0m.
        default: false
        type: bool

   [0;33mreset_values[0m  When upgrading package, reset the values to the ones built into the chart.
        default: true
        type: bool

   [0;33mreuse_values[0m  When upgrading package, specifies wether to reuse the last release's values and merge in any overrides from
                 parameters [4mrelease_values[0m, [4mvalues_files[0m or [4mset_values[0m.
                 If [4mreset_values[0m is set to [1;30m`True'[0m, this is ignored.
        default: null
        type: bool

   [0;33mset_values[0m  Values to pass to chart configuration
        default: null
        elements: dict
        type: list
        suboptions:

           [0;31m[1mvalue[0m[0m          Value to pass to chart configuration (e.g phase=prod).
          type: str

           [0;33mvalue_type[0m          Use [1;30m`raw'[0m set individual value.
                       Use [1;30m`string'[0m to force a string for an individual value.
                       Use [1;30m`file'[0m to set individual values from a file when the value itself is too long
                       for the command line or is dynamically generated.
                       Use [1;30m`json'[0m to set json values (scalars/objects/arrays). This feature requires
                       helm>=3.10.0.
          choices: [raw, string, json, file]
          default: raw

   [0;33mskip_crds[0m  Skip custom resource definitions when installing or upgrading.
        default: false
        type: bool

   [0;33mtimeout[0m  A Go duration (described here [4mhttps://pkg.go.dev/time#ParseDuration[0m) value to wait for Kubernetes commands
            to complete. This defaults to 5m0s.
            similar to [1;30m`wait_timeout'[0m but does not required [1;30m`wait'[0m to be activated.
            Mutually exclusive with [1;30m`wait_timeout'[0m.
        default: null
        type: str

   [0;33mupdate_repo_cache[0m  Run [1;30m`helm repo update'[0m before the operation. Can be run as part of the package installation or as a
                      separate step (see Examples).
        default: false
        type: bool

   [0;33mvalidate_certs[0m  Whether or not to verify the API server's SSL certificates. Can also be specified via
                   [1;30m`K8S_AUTH_VERIFY_SSL'[0m environment variable.
        aliases: [verify_ssl]
        default: true
        type: bool

   [0;33mvalues_files[0m  Value files to pass to chart.
                 Paths will be read from the target host's filesystem, not the host running ansible.
                 values_files option is evaluated before values option if both are used.
                 Paths are evaluated in the order the paths are specified.
        default: []
        elements: str
        type: list

   [0;33mwait[0m    When [4mrelease_state[0m is set to [1;30m`present'[0m, wait until all Pods, PVCs, Services, and minimum
           number of Pods of a Deployment are in a ready state before marking the release as successful.
           When [4mrelease_state[0m is set to [1;30m`absent'[0m, will wait until all the resources are deleted
           before returning. It will wait for as long as [4mwait_timeout[0m. This feature requires helm>=3.7.0.
           Added in version 2.3.0.
        default: false
        type: bool

   [0;33mwait_timeout[0m  Timeout when wait option is enabled (helm2 is a number of seconds, helm3 is a duration).
                 The use of [4mwait_timeout[0m to wait for kubernetes commands to complete has been deprecated and
                 will be removed after 2022-12-01.
        default: null
        type: str

[1mNOTES:[0m
      * The default idempotency check can fail to report changes when [1;30m`release_state'[0m is set to
        [1;30m`present'[0m and [1;30m`chart_repo_url'[0m is defined. Install helm diff >= 3.4.1 for better
        results.

[1mREQUIREMENTS:[0m  helm (https://github.com/helm/helm/releases), yaml (https://pypi.org/project/PyYAML/)


[1mAUTHOR[0m: Lucas Boisserie (@LucasBoisserie), Matthieu Diehr (@d-matt)

[1mEXAMPLES:[0m
- name: Deploy latest version of Prometheus chart inside monitoring namespace (and create it)
  kubernetes.core.helm:
    name: test
    chart_ref: stable/prometheus
    release_namespace: monitoring
    create_namespace: true

# From repository
- name: Add stable chart repo
  kubernetes.core.helm_repository:
    name: stable
    repo_url: "https://kubernetes.github.io/ingress-nginx"

- name: Deploy latest version of Grafana chart inside monitoring namespace with values
  kubernetes.core.helm:
    name: test
    chart_ref: stable/grafana
    release_namespace: monitoring
    values:
      replicas: 2

- name: Deploy Grafana chart on 5.0.12 with values loaded from template
  kubernetes.core.helm:
    name: test
    chart_ref: stable/grafana
    chart_version: 5.0.12
    values: "{{ lookup('template', 'somefile.yaml') | from_yaml }}"

- name: Deploy Grafana chart using values files on target
  kubernetes.core.helm:
    name: test
    chart_ref: stable/grafana
    release_namespace: monitoring
    values_files:
      - /path/to/values.yaml

- name: Remove test release and waiting suppression ending
  kubernetes.core.helm:
    name: test
    state: absent
    wait: true

- name: Separately update the repository cache
  kubernetes.core.helm:
    name: dummy
    namespace: kube-system
    state: absent
    update_repo_cache: true

- name: Deploy Grafana chart using set values on target
  kubernetes.core.helm:
    name: test
    chart_ref: stable/grafana
    release_namespace: monitoring
    set_values:
      - value: phase=prod
        value_type: string

# From git
- name: Git clone stable repo on HEAD
  ansible.builtin.git:
    repo: "http://github.com/helm/charts.git"
    dest: /tmp/helm_repo

- name: Deploy Grafana chart from local path
  kubernetes.core.helm:
    name: test
    chart_ref: /tmp/helm_repo/stable/grafana
    release_namespace: monitoring

# From url
- name: Deploy Grafana chart on 5.6.0 from url
  kubernetes.core.helm:
    name: test
    chart_ref: "https://github.com/grafana/helm-charts/releases/download/grafana-5.6.0/grafana-5.6.0.tgz"
    release_namespace: monitoring

# Using complex Values
- name: Deploy new-relic client chart
  kubernetes.core.helm:
    name: newrelic-bundle
    chart_ref: newrelic/nri-bundle
    release_namespace: default
    force: True
    wait: True
    replace: True
    update_repo_cache: True
    disable_hook: True
    values:
      global:
        licenseKey: "{{ nr_license_key }}"
        cluster: "{{ site_name }}"
      newrelic-infrastructure:
        privileged: True
      ksm:
        enabled: True
      prometheus:
        enabled: True
      kubeEvents:
        enabled: True
      logging:
        enabled: True

# Deploy latest version
- name: Deploy latest version of Grafana chart using reuse_values
  kubernetes.core.helm:
    name: test
    chart_ref: stable/grafana
    release_namespace: monitoring
    reuse_values: true
    values:
      replicas: 2
      version: 3e8ec0b2dffa40fb97d5342e4af887de95faa8c61a62480dd7f8aa03dffcf533

[1mRETURN VALUES:[0m

   [0;33mcommand[0m  Full `helm` command built by this module, in case you want to re-run the command outside the module or debug a
            problem.
        returned: always
        sample: helm upgrade ...
        type: str

   [0;33mstatus[0m  A dictionary of status output
        returned: on success Creation/Upgrade/Already deploy
        type: complex
        contains:

           [0;33mappversion[0m          Version of app deployed
          returned: always
          type: str

           [0;33mchart[0m          Chart name and chart version
          returned: always
          type: str

           [0;33mname[0m          Name of the release
          returned: always
          type: str

           [0;33mnamespace[0m          Namespace where the release is deployed
          returned: always
          type: str

           [0;33mrevision[0m          Number of time where the release has been updated
          returned: always
          type: str

           [0;33mstatus[0m          Status of release (can be DEPLOYED, FAILED, ...)
          returned: always
          type: str

           [0;33mupdated[0m          The Date of last update
          returned: always
          type: str

           [0;33mvalues[0m          Dict of Values used to deploy
          returned: always
          type: str

   [0;33mstderr[0m  Full `helm` command stderr, in case you want to display it or examine the event log
        returned: always
        sample: ''
        type: str

   [0;33mstdout[0m  Full `helm` command stdout, in case you want to display it or examine the event log
        returned: always
        sample: ''
        type: str

